//bit 15 extraction : extract bit 15 from reg1
movi 1,0xFFFF 	//init reg 1, base value
//nop //backward compat with java simulator
movi 2,0x8001	//init reg 2

//reg4 = store carries

//r3(15)=1:
  //r5(15)=1:
    //r4++
    //r3=r5+r3
  //r5(15)=0:
    //r3=r5+r3
    //r3(15)=1:
      //r4++

//r3(15)=0:
  //r5(15)=1:
    //r3=r5+r3
    //r3(15)=1:
      //r4++

movi 7,0x8000
nand 7,3,7 //nand with reg3
nand 7,7,7 //invert
beq 7,0,fini_r1 //means bit was 0 (0 nand 1=>1)
  //bit was 1, verify r5(15)
  movi 7,0x8000
  nand 7,5,7 //nand with reg5
  nand 7,7,7 //invert 
  add 3,3,5 //add, because sometimes, you have to do things
  beq 7,0,add_then_check//was 0
    //r5(15)=1
    addi 4,4,1 //add the carry
  beq 0,0, skip //we are done
  
  add_then_check: //r5(15) was 0
    //add 3,3,5 //add, because sometimes, you have to do things
    //verify sum(15)=1
    movi 7,0x8000
    nand 7,3,7 //nand with reg3
    nand 7,7,7 //invert
    beq 7,0,skip_add
      //sum(15) was 1
      addi 4,4,1 //add the carry to reg6
  skip_add:
beq 0,0,skip //done
//addi 4,4,1 //add 1 to carry reg
//nand 1,6,1 //clear bit
//nand 1,1,1 //get and

fini_r1: //r3(15) was 0
  //r5(15)=1 ?
  add 3,3,5 //add, because sometimes, you have to do things
  //beq 0,0,skip
  //movi 7,0x8000
  //nand 7,5,7 //nand with reg5
  //nand 7,7,7 //invert
  //add 3,3,5 //add, because sometimes, you have to do things
  //beq 7,0,skip//was 0, done
    //r3(15)=1
    //addi 4,4,1 //add the carry
  //beq 0,0, skip_add2 //we are done
  
  //check_sum: //r5(15) was 0
   // add 3,3,5 //add, because sometimes, you have to do things
    //verify sum(15)=1
    //movi 7,0x8000
    //nand 7,3,7 //nand with reg3
    //nand 7,7,7 //invert
    //beq 7,0,skip_add2
      //sum(15) was 1
      //addi 4,4,1 //add the carry to reg6
//skip_add2:

skip://skip the 32b add

// loop:
// 
// //extract bit 15 from reg5
// //init mask
// movi 5,0x8000
// nand 6,5,5 //inverted mask in r6
// addi 4,0,0 //init reg4
// 
// //and
// nand 7,1,5 //nand with reg1
// nand 7,7,7 //invert
// beq 7,0,fini_r1 //means bit was 0 (0 nand 1=>1)
// addi 4,4,1 //add 1 to carry reg
// nand 1,6,1 //clear bit
// nand 1,1,1 //get and
// 
// fini_r1:
// nand 7,2,5 //nand with reg1
// nand 7,7,7 //invert
// beq 7,0,fini_r2 //means bit was 0 (0 nand 1=>1)
// addi 4,4,1
// nand 2,6,2 //clear bit
// nand 2,2,2 //get and
// 
// fini_r2:
// add 3,1,2 // make the 15b+15b add
// nand 7,3,5 //nand with reg1
// nand 7,7,7 //invert
// beq 7,0,fini_sum //means bit was 0 (0 nand 1=>1)
// addi 4,4,1
// nand 3,6,3 //clear bit
// nand 3,3,3 //get and
// 
// fini_sum:
// //now we must set the C reg (reg4) to reg4>>1 and the MSB of reg3 to reg4(0)
// //reg4(0) = and with 1
// addi 7,0,1 
// nand 7,4,7 
// nand 7,7,7 //r7=reg4(0)
// beq 7,0,set_r4_to_1
// //if r7=1...
// add 3,5,3 //add 0x8000 to reg3
// //else
// set_r4_to_1:
// addi 7,0,2 
// nand 7,4,7 
// nand 7,7,7 //r7= reg4(1)>>1
// //addi 7,0,0 //clear reg4
// beq 7,0,end //no need to do anything, no carry
// //if carry 
// addi 4,0,1 //set reg4 to 1
end:
addi 4,4,0 //just to get the value in the trace
addi 3,3,0 //just to get the value in the trace
halt //we are done! Next!